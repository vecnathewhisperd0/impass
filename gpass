#!/usr/bin/env python

import os
import urwid
import subprocess
import sys
import getpass

import gpass

############################################################

class ListItem(urwid.WidgetWrap):
    def __init__(self, entry):
        self.entry = entry

        w = urwid.AttrMap(
            urwid.Text('%s: %s' % (self.entry.index, self.entry.getContext())),
            'body', 'focus')
        self.__super.__init__(w)

    def selectable(self):
        return True

    def keypress(self, size, key):
        return key

def select(mset):

    palette = [
        ('body','dark cyan', '', 'standout'),
        ('focus','dark red', 'dark cyan', 'standout'),
        ('head','light red', 'black'),
        ]

    def keypress (input):
        global selected
        if input in ('q', 'Q'):
            raise urwid.ExitMainLoop()
        if input in ('n'):
            focus, pos = listbox.get_focus()
            if not focus: return
            listbox.set_focus(pos + 1)
        if input in ('p'):
            focus, pos = listbox.get_focus()
            if not focus: return
            if pos == 0: return
            listbox.set_focus(pos - 1)
        if input is 'enter':
            focus = listbox.get_focus()[0]
            selected = focus.entry
            raise urwid.ExitMainLoop()

    global selected
    selected = None

    items = []
    for entry in mset:
        items.append(ListItem(entry))

    listbox = urwid.ListBox(urwid.SimpleListWalker(items))
    view = urwid.Frame(urwid.AttrWrap(listbox, 'body'))
    loop = urwid.MainLoop(
        view,
        palette,
        unhandled_input=keypress,
        handle_mouse=False,
        )
    loop.run()

    return selected

############################################################

def xclip(text):
    sin = subprocess.PIPE
    p = subprocess.Popen(' '.join(["xclip", "-i"]),
                         shell=True,
                         stdin=sin)
    p.communicate(text)

############################################################

def usage():
    print """Usage: gpass <cmd> [<args>]

  search <string>
  add
"""

def search(query):
    if not query:
        try:
            query = raw_input('search: ')
        except KeyboardInterrupt:
            sys.exit(-1)
    db = gpass.Database(DB)
    results = db.search(query)
    if not results:
        print >>sys.stderr, "No results found."
        sys.exit(1)
    elif len(results) == 1:
        result = results[0]
    else:
        try:
            result = select(results)
        except KeyboardInterrupt:
            sys.exit(-1)
    if not result:
        sys.exit(-1)
    xclip(result.getPassword())
    print >>sys.stderr, "Context:", result.getContext()
    print >>sys.stderr, "Password copied to clipboard."
    sys.exit()

def add():
    try:
        context = raw_input('context: ')
        password = getpass.getpass('password: ')
    except KeyboardInterrupt:
        sys.exit(-1)
    db = gpass.Database(DB, writable=True)
    newindex = db.add(context, password)
    db.save()
    print >>sys.stderr, "Wrote new entry:", newindex

############################################################

# (cd mnt && find . -mindepth 1 -maxdepth 1 -printf '%P\n' | tar cv -T -) | gpg --encrypt >gpass.tar.gpg
# gpg --decrypt < gpass.tar.gpg | tar xz
#DB = '/home/jrollins/.gpass/gpass.tar'
DB =  os.getenv('GPASS_DB', '/home/jrollins/.gpass.tar.gpg')

cmd = sys.argv[1]

if cmd == 'search':
    search(sys.argv[2:])
elif cmd == 'add':
    add()
elif cmd == 'list':
    db = Database(DB)
    print db.entries()
elif cmd == 'help':
    usage()
else:
    print >>sys.stderr, "unknown command:", cmd
    usage()
