#!/usr/bin/env python

import os
import sys
import getpass
import json
import base64
import gpgme
import assword
import subprocess

############################################################

PROG = os.path.basename(sys.argv[0])

def usage():
    print "Usage:", PROG, "<command> [<args>...]"
    print """
Commands:

  add [<context>]    Add a new entry.  If context is '-' read from stdin.
                     If not specified, user will be prompted for context.
                     See ASSWORD_PASSWORD for information on passwords.

  dump [<string>]    Dump search results as json.  If string not specified all
                     entries are returned.  Passwords will not be displayed
                     unless ASSWORD_DUMP_PASSWORDS is set.

  xsearch [<string>] X search interface, good for X window manager integration.
                     If string is not specified a search prompt will be
                     displayed.  If multiple results for query are available a
                     context selection list will be presented.  When a single
                     result is available, the password will be retrieved
                     according to the ASSWORD_XPASTE method.

  remove [id:]<id>   Delete an entry from the database by index.

  help               This help.

The search string "id:<id>" can be used to retrieve a single entry by
its index.

Environment:

  ASSWORD_DB        Path to assword database file (default: ~/.assword/db).

  ASSWORD_KEYID     OpenPGP key ID of database encryption recipient.
                    If set to path, key ID will be read from file
                    (default: ~/.assword/keyid).

  ASSWORD_PASSWORD  For new entries, length of auto-generated password in
                    bytes (default: 18).  If set to 'prompt' user will be
                    prompted for password.

  ASSWORD_DUMP_PASSWORDS Include passwords in dump when set (default: unset).

  ASSWORD_XPASTE    Method for password retrieval.  Options are: 'xdo'
                    (default) which attempts to type the password into the
                    window that had focus on launch, or 'xclip' which inserts
                    the password in the X clipboard.
"""

############################################################

ASSWORD_DIR = os.path.join(os.path.expanduser('~'),'.assword')

DBPATH = os.getenv('ASSWORD_DB', os.path.join(ASSWORD_DIR, 'db'))

############################################################

def pwgen(bytes):
    s = os.urandom(bytes)
    return base64.b64encode(s)

def xclip(text):
    p = subprocess.Popen(' '.join(["xclip", "-i"]),
                         shell=True,
                         stdin=subprocess.PIPE)
    p.communicate(text)

############################################################
# Return codes:
# 2 command line error
# 3 password error
# 10 db open error
# 20 gpg/key error
############################################################

def open_db(keyid=None):
    try:
        db = assword.Database(DBPATH, keyid)
    except assword.DatabasePathError as e:
        print >>sys.stderr, e.msg
        sys.exit(10)
    return db

def get_keyid():
    keyid = os.getenv('ASSWORD_KEYID')
    keyfile = os.path.join(ASSWORD_DIR, 'keyid')
    if keyid and os.path.exists(keyid):
        keyfile = keyid
        keyid = None
    if os.path.exists(keyfile):
        with open(keyfile, 'r') as f:
            keyid = f.read().strip()

    save = False
    if not keyid:
        print >>sys.stderr, "OpenPGP key ID of encryption target not specified."
        print >>sys.stderr, "Please provide key ID in ASSWORD_KEYID environment variable,"
        print >>sys.stderr, "or specify key ID now to save in ~/.assword/keyid file."
        keyid = raw_input('OpenPGP key ID: ')
        if keyid == '':
            keyid = None
        else:
            save = True

    if not keyid:
        sys.exit(20)

    try:
        gpg = gpgme.Context()
        gpg.get_key(keyid)
    except gpgme.GpgmeError:
        print >>sys.stderr, "Invalid key ID:", keyid
        sys.exit(20)

    if save:
        if not os.path.isdir(os.path.dirname(keyfile)):
            os.mkdir(os.path.dirname(keyfile))
        with open(keyfile, 'w') as f:
            f.write(keyid)

    return keyid

def password_prompt():
    try:
        password0 = getpass.getpass('password: ')
        password1 = getpass.getpass('reenter password: ')
        if password0 != password1:
            print >>sys.stderr, "Error: Passwords do not match.  Aborting."
            sys.exit(3)
        return password0
    except KeyboardInterrupt:
        sys.exit(-1)

# Add a password to the database.
# First argument is potentially a context.
def add(args):
    keyid = get_keyid()
    try:
        # get context as argument
        context = args[0]
        # or from stdin
        if context == '-':
            context = sys.stdin.read()
    # prompt for context if not specified
    except IndexError:
        context = raw_input('context: ')
    except KeyboardInterrupt:
        sys.exit(-1)

    db = open_db(keyid)

    # get password from prompt if requested
    if os.getenv('ASSWORD_PASSWORD') == 'prompt':
        password = password_prompt()
    # otherwise auto generate
    else:
        print >>sys.stderr, "Auto-generating password...",
        bytes = int(os.getenv('ASSWORD_PASSWORD', 18))
        password = pwgen(bytes)
        print >>sys.stderr, "done."

    newindex = db.add(context.strip(), password)
    # NOTE: This is what actually saves the new database!
    db.save()
    print >>sys.stderr, "Wrote new entry: id:" + newindex

def dump(args):
    query = ' '.join(args)
    if not os.path.exists(DBPATH):
        print >>sys.stderr, """Database file does not exist.
Add an entry to the database with 'assword add'.
See 'assword help' for more information."""
        sys.exit(10)
    db = open_db()
    results = db.search(query)
    if not os.getenv('ASSWORD_DUMP_PASSWORDS'):
        for index in results.keys():
            results[index]['password'] = ''
    print json.dumps(results, sort_keys=True, indent=2)

# The X GUI
def xsearch(args, method='xdo'):
    query = ' '.join(args)
    if method == 'xdo':
        try:
            import xdo
        except:
            print >>sys.stderr, "The xdo module is not found, so the 'xdo' paste method is not available."
            print >>sys.stderr, "Please install python-xdo."
            sys.exit()
        # initialize xdo
        x = xdo.xdo()
        # get the id of the currently focused window
        win = x.get_focused_window()
    elif method == 'xclip':
        pass
    else:
        print >>sys.stderr, "Unknown X paste method:", method
        sys.exit(2)
    # do it
    result = assword.Xsearch(DBPATH, query=query).returnValue()
    # type the password in the saved window
    if result:
        if method == 'xdo':
            x.focus_window(win)
            x.wait_for_window_focus(win)
            x.type(result['password'])
        elif method == 'xclip':
            xclip(result['password'])

def remove(args):
    keyid = get_keyid()
    try:
        index = args[0]
    except IndexError:
        print >>sys.stderr, "Must specify index to remove."
        sys.exit(2)
    if index.find('id:') == 0:
        index = index[3:]
    db = open_db(keyid)
    if index not in db.entries:
        print >>sys.stderr, "No entry with index", index + "."
        sys.exit(1)
    try:
        print >>sys.stderr, "Really remove entry " + index + "?  Context:"
        print >>sys.stderr
        print >>sys.stderr, db.entries[index]['context']
        print >>sys.stderr
        response = raw_input("Type 'yes' to remove: ")
    except KeyboardInterrupt:
        sys.exit(-1)
    if response != 'yes':
        sys.exit(-1)
    db.remove(index)
    db.save()
    print >>sys.stderr, "Removed entry: id:" + index

############################################################
# Basically main()

if len(sys.argv) < 2:
    print >>sys.stderr, "Command not specified."
    usage()
    sys.exit(2)

cmd = sys.argv[1]

if cmd == 'add':
    add(sys.argv[2:])
elif cmd == 'dump':
    dump(sys.argv[2:])
elif cmd == 'xsearch':
    method = os.getenv('ASSWORD_XPASTE', 'xdo')
    xsearch(sys.argv[2:], method=method)
elif cmd == 'remove':
    remove(sys.argv[2:])
elif cmd == 'help':
    usage()
else:
    print >>sys.stderr, "Unknown command:", cmd
    print >>sys.stderr
    usage()
    sys.exit(2)
