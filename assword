#!/usr/bin/env python

import os
import urwid
import subprocess
import sys
import getpass
import json
import base64
import gpgme
import assword

############################################################

def usage():
    prog = os.path.basename(sys.argv[0])
    print "Usage:", prog, "<command> [<args>...]"
    print """
Commands:

  add [<context>]    Add a new entry.  If context is '-' read from stdin.
                     If not specified, user will be prompted for context.
                     See ASSWORD_PASSWORD for information on password.

  search [<string>]  Search the database for string.  If string not specified
                     user will be prompted.

  dump [<string>]    Dump search results as json.  If string not specified
                     all entries are returned.

  help               This help.

The search string "id:<id>" can be used to retrieve a single entry by
it's index.

Environment:

  PGPID             OpenPGP key id of database encryption recipient.
                    This variable is required to be set.

  ASSWORD_DB        Path to assword database file (default: ~/.assword.gpg).

  ASSWORD_PASSWORD  Length of auto-generated password in bytes (default: 18).
                    If set to 'prompt' user will be prompted for password.
"""

############################################################

ASSWORD_DIR = os.path.join(os.path.expanduser('~'),'.assword')

DBPATH = os.getenv('ASSWORD_DB', os.path.join(ASSWORD_DIR, 'db'))

############################################################


############################################################

def pwgen(bytes):
    s = os.urandom(bytes)
    return base64.b64encode(s)

############################################################

def get_keyid():
    keyid = os.getenv('ASSWORD_KEYID')
    keyfile = os.path.join(ASSWORD_DIR, 'keyid')
    if keyid and os.path.exists(keyid):
        keyfile = keyid
        keyid = None
    if os.path.exists(keyfile):
        with open(keyfile, 'r') as f:
            keyid = f.read().strip()

    save = False
    if not keyid:
        print >>sys.stderr, "OpenPGP key ID of encryption target not specified."
        print >>sys.stderr, "Please provide key ID in ASSWORD_KEYID environment variable,"
        print >>sys.stderr, "or specify key ID now to save in ~/.assword/keyid file."
        keyid = raw_input('OpenPGP key ID: ')
        if keyid == '':
            keyid = None
        else:
            save = True

    if not keyid:
        sys.exit(2)

    try:
        gpg = gpgme.Context()
        gpg.get_key(keyid)
    except gpgme.GpgmeError:
        print >>sys.stderr, "Invalid key ID:", keyid
        sys.exit(2)

    if save:
        with open(keyfile, 'w') as f:
            f.write(keyid)

    return keyid

def password_prompt():
    try:
        password0 = getpass.getpass('password: ')
        password1 = getpass.getpass('reenter password: ')
        if password0 != password1:
            print >>sys.stderr, "Error: Passwords do not match.  Aborting."
            sys.exit(3)
        return password0
    except KeyboardInterrupt:
        sys.exit(-1)

def add(args):
    keyid = get_keyid()
    # get context
    try:
        # as argument
        context = args[0]
        # or stdin
        if context == '-':
            context = sys.stdin.read()
    # or prompt if nothing specified
    except IndexError:
        context = raw_input('context: ')
    except KeyboardInterrupt:
        sys.exit(-1)
    # get password from prompt if specified
    if os.getenv('ASSWORD_PASSWORD') == 'prompt':
        password = password_prompt()
    # otherwise auto generate
    else:
        print >>sys.stderr, "Auto-generating password...",
        bytes = int(os.getenv('ASSWORD_PASSWORD', 18))
        password = pwgen(bytes)
        print >>sys.stderr, "done."
    db = assword.Database(DBPATH, keyid)
    newindex = db.add(context, password)
    db.save()
    print >>sys.stderr, "Wrote new entry:", newindex

def dump(args):
    query = ' '.join(args)
    if not os.path.exists(DBPATH):
        print >>sys.stderr, """Database file does not exist.
Add an entry to the database with 'assword add'.
See 'assword help' for more information."""
        sys.exit(3)
    db = assword.Database(DBPATH)
    results = db.search(query)
    if not os.getenv('ASSWORD_DUMP_PASSWORDS'):
        for index in results.keys():
            results[index]['password'] = ''
    print json.dumps(results, sort_keys=True, indent=2)

############################################################


if len(sys.argv) < 2:
    usage()
    sys.exit(1)

cmd = sys.argv[1]

if cmd == 'add':
    add(sys.argv[2:])
elif cmd == 'dump':
    dump(sys.argv[2:])
elif cmd == 'help':
    usage()
else:
    print >>sys.stderr, "Unknown command:", cmd
    print >>sys.stderr
    usage()
