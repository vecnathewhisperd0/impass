#!/usr/bin/env python

import os
import argparse
import urwid
import subprocess
import sys
import getpass
import assword
import json

############################################################

class ListItem(urwid.WidgetWrap):
    def __init__(self, index, entry):
        self.index = index
        self.entry = entry

        w = urwid.AttrMap(
            urwid.Text('%s: %s' % (self.index, self.entry['context'])),
            'body', 'focus')
        self.__super.__init__(w)

    def selectable(self):
        return True

    def keypress(self, size, key):
        return key

def select(mset):

    palette = [
        ('body','dark cyan', '', 'standout'),
        ('focus','dark red', 'dark cyan', 'standout'),
        ('head','light red', 'black'),
        ]

    def keypress (input):
        global selected
        if input in ('q', 'Q'):
            raise urwid.ExitMainLoop()
        if input in ('n'):
            focus, pos = listbox.get_focus()
            if not focus: return
            listbox.set_focus(pos + 1)
        if input in ('p'):
            focus, pos = listbox.get_focus()
            if not focus: return
            if pos == 0: return
            listbox.set_focus(pos - 1)
        if input is 'enter':
            focus = listbox.get_focus()[0]
            selected = focus.entry
            raise urwid.ExitMainLoop()

    global selected
    selected = None

    items = []
    for index, entry in sorted(mset.iteritems()):
        items.append(ListItem(index, entry))

    listbox = urwid.ListBox(urwid.SimpleListWalker(items))
    view = urwid.Frame(urwid.AttrWrap(listbox, 'body'))
    loop = urwid.MainLoop(
        view,
        palette,
        unhandled_input=keypress,
        handle_mouse=False,
        )
    loop.run()

    return selected

############################################################

def pwgen():
    #p = subprocess.Popen(' '.join(["pwgen", "-s", "10", "1"]),
    p = subprocess.Popen(' '.join(["gpg", "-a", "--gen-random", "1", "12"]),
                         shell=True,
                         stdout=subprocess.PIPE)
    ret = p.communicate()
    return ret[0].strip()

def xclip(text):
    p = subprocess.Popen(' '.join(["xclip", "-i", "-selection", "primary"]),
                         shell=True,
                         stdin=subprocess.PIPE)
    p.communicate(text)

############################################################

def usage():
    prog = os.path.basename(sys.argv[0])
    print "Usage:", prog, "<command> [<args>...]"
    print """
commands:

  search <string>               search the database for string
  add [<context> [<password>]]  add a new entry
  dump                          plaintext dump of password database (as json)
  help                          this help

environment:

  ASSWORD_DB   path to assword database file (~/.assword.gpg by default)
  PGPID        OpenPGP key id of database encryption recipient

"""

def check_key():
    if not KEY:
        print >>sys.stderr, "Error: OpenPGP key id not specified in PGPID env var."
        sys.exit(2)

def search(query):
    if not query:
        try:
            query = raw_input('search: ')
            query = query.split()
        except KeyboardInterrupt:
            sys.exit(-1)
    db = assword.Database(DB, KEY)
    results = db.search(query)
    if not results:
        print >>sys.stderr, "No results found."
        sys.exit(2)
    elif len(results) == 1:
        result = results.values()[0]
    else:
        try:
            result = select(results)
        except KeyboardInterrupt:
            sys.exit(-1)
    if not result:
        sys.exit(-1)
    xclip(result['password'])
    print >>sys.stderr, "Context:", result['context']
    print >>sys.stderr, "Password copied to clipboard."
    sys.exit()

def add(args):
    try:
        context = args[0]
    except IndexError:
        context = raw_input('context: ')
    except KeyboardInterrupt:
        sys.exit(-1)
    try:
        password = args[1]
    except IndexError:
        password = getpass.getpass('password: ')
    except KeyboardInterrupt:
        sys.exit(-1)
    db = assword.Database(DB, KEY)
    newindex = db.add(context, password)
    db.save()
    print >>sys.stderr, "Wrote new entry:", newindex

############################################################

DB =  os.getenv('ASSWORD_DB', os.path.join(os.path.expanduser('~'),'.assword.gpg'))
KEY = os.getenv('PGPID')

if len(sys.argv) < 2:
    usage()
    sys.exit(1)

cmd = sys.argv[1]

if cmd == 'search':
    check_key()
    search(sys.argv[2:])
elif cmd == 'add':
    check_key()
    add(sys.argv[2:])
elif cmd == 'dump':
    check_key()
    db = assword.Database(DB, KEY)
    print json.dumps(db.entries, sort_keys=True, indent=2)
elif cmd == 'help':
    usage()
else:
    print >>sys.stderr, "Unknown command:", cmd
    print >>sys.stderr
    usage()
